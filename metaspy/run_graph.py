import os
import glob
import json
from datetime import datetime
import typer
from rich import print as rprint
import webbrowser

def main():
    data_dirs = glob.glob(os.path.join("user_data", "data_*"))
    
    if not data_dirs:
        rprint("‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c d·ªØ li·ªáu n√†o c√≥ d·∫°ng data_*")
        return
    
    rprint("[bold]Danh s√°ch th∆∞ m·ª•c d·ªØ li·ªáu:[/bold]")
    for i, dir_name in enumerate(data_dirs, 1):
        json_files = glob.glob(os.path.join(dir_name, "*.json"))
        num_files = len(json_files)
        
        try:
            creation_time = os.path.getctime(dir_name)
            time_str = datetime.fromtimestamp(creation_time).strftime("%d/%m/%Y %H:%M:%S")
        except:
            time_str = "Kh√¥ng x√°c ƒë·ªãnh"
            
        rprint(f"{i}. [bold]{dir_name}[/bold]")
    
    choice = typer.prompt("Ch·ªçn s·ªë th·ª© t·ª± th∆∞ m·ª•c ƒë·ªÉ xu·∫•t d·ªØ li·ªáu", type=int)
    
    if choice < 1 or choice > len(data_dirs):
        rprint("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá")
        return
    
    selected_dir = data_dirs[choice - 1]
    json_files = glob.glob(os.path.join(selected_dir, "*.json"))
    
    if not json_files:
        rprint(f"‚ùå Kh√¥ng c√≥ file data_*.json n√†o trong th∆∞ m·ª•c {selected_dir}")
        return

    rprint("\n[bold]Ch·ªçn ch·ª©c nƒÉng:[/bold]")
    rprint("1. T·∫°o bi·ªÉu ƒë·ªì k·∫øt n·ªëi b·∫°n b√®")
    rprint("2. T·∫°o bi·ªÉu ƒë·ªì v·ªã tr√≠ ƒë·ªãa l√Ω")
    
    sub_choice = typer.prompt("Nh·∫≠p s·ªë th·ª© t·ª± ch·ª©c nƒÉng", type=int)
    
    first_json_file = json_files[0]
    with open(first_json_file, "r", encoding="utf-8") as f:
        try:
            json_data = json.load(f)
        except json.JSONDecodeError:
            rprint("‚ùå File JSON b·ªã l·ªói ho·∫∑c kh√¥ng h·ª£p l·ªá")
            return

    output_folder = "graph-create"
    os.makedirs(output_folder, exist_ok=True)
    
    if sub_choice == 1:
        output_file = os.path.join(output_folder, "friends_data.js")
        with open(output_file, "w", encoding="utf-8") as f:
            f.write("const jsonData = ")
            json.dump(json_data, f, indent=2, ensure_ascii=False)
            f.write(";")
        rprint(f"‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c ghi v√†o: [bold]{output_file}[/bold]")
        
        html_file = os.path.join(output_folder, "connection.html")
        if os.path.exists(html_file):
            webbrowser.open(f"file://{os.path.abspath(html_file)}")
            rprint(f"üåê ƒê√£ m·ªü [bold]{html_file}[/bold] tr√™n tr√¨nh duy·ªát m·∫∑c ƒë·ªãnh")
        else:
            rprint(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file [bold]{html_file}[/bold] ƒë·ªÉ m·ªü")
            
    elif sub_choice == 2:
        output_file = os.path.join(output_folder, "location_data.js")
        with open(output_file, "w", encoding="utf-8") as f:
            f.write("const jsonData = ")
            json.dump(json_data, f, indent=2, ensure_ascii=False)
            f.write(";")
        rprint(f"‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c ghi v√†o: [bold]{output_file}[/bold]")
        
        html_file = os.path.join(output_folder, "location.html")
        if os.path.exists(html_file):
            webbrowser.open(f"file://{os.path.abspath(html_file)}")
            rprint(f"üåê ƒê√£ m·ªü [bold]{html_file}[/bold] tr√™n tr√¨nh duy·ªát m·∫∑c ƒë·ªãnh")
        else:
            rprint(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file [bold]{html_file}[/bold] ƒë·ªÉ m·ªü")
    else:
        rprint("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá")

if __name__ == "__main__":
    main()